<?php/*Plugin Name: Landing Pages Extension - Use Landing Page as HomepagePlugin URI: http://www.inboundnow.com/landing-pages/Description: Adds an option to select landing page as default homepage in Settings->ReadingAuthor: Hudson Atwell, David WellsVersion: 3.0.1Author URI: http://www.inboundnow.com*/if (!class_exists('Home_Page_Lander')) {    class Home_Page_Lander {        static  $first_visit  = false;        static  $front_page_id;        static  $splash_enable;        static  $splash_page_id;        static  $variations;        static  $marker;        static  $next_marker;        /**         *  Initialize class         */        public function __construct() {            self::define_constants();            self::load_hooks();            self::get_settings();        }        /**         *  Define constants         */        public function define_constants() {            define('LP_HOMEPAGE_CURRENT_VERSION', '3.0.1' );            define('LP_HOMEPAGE_LABEL' , __( 'Use Landing Page as Homepage' , 'inbound-pro' ));            define('LP_HOMEPAGE_SLUG' , plugin_basename( dirname(__FILE__) ) );            define('LP_HOMEPAGE_REMOTE_ITEM_NAME', 'use-landing-page-as-homepage' );            define('LP_HOMEPAGE_URLPATH', WP_PLUGIN_URL.'/'.plugin_basename( dirname(__FILE__) ).'/' );            define('LP_HOMEPAGE_PATH', WP_PLUGIN_DIR.'/'.plugin_basename( dirname(__FILE__) ).'/' );            define('LP_HOMEPAGE_FILE' ,  __FILE__ );        }        /**         *  Load hooks and filters         */        public function load_hooks() {            /* Setup Licensing & Updating */            add_action('admin_init', array( __CLASS__ , 'extend_licensing'));            /* Add Landing Pages to 'Reading' Settings Page */            add_filter( 'get_pages',  array( __CLASS__ , 'add_landing_pages_to_homepage_select_dropdown' ));            //tamper with homepage query to call custom post type post if set            add_action( 'pre_get_posts', array( __CLASS__ , 'hack_front_page_query' ));            /* determine if homepage and user's first visit or not */            add_action('template_redirect' , array( __CLASS__ , 'determine_first_visit' ) );            //make sure the correct template is called            add_action("template_redirect", array( __CLASS__ , 'set_front_page_template'));            /*  Add settings to inbound pro  */            add_filter('inbound_settings/extend', array( __CLASS__  , 'add_pro_settings' ) );            /* Add legacy settings */            add_filter('lp_define_global_settings', array( __CLASS__ , 'define_legacy_settings' ) , 2, 1);        }        /**         * Legacy splash page redirect         */        public static function determine_first_visit() {            global $post;            if ( !isset($post) ) {                return;            }            /*Get Homepage URL & Remove Slashes */            $wordpress_url = get_bloginfo('url');            $wordpress_url = str_replace('/','',$wordpress_url);            /*Get Current URL & Remove Slashes */            $current_url = str_replace( '/' , '' , "http://".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"] );            if ( ( $current_url == $wordpress_url ) && !isset($_COOKIE['inbound_home_visit']) && self::$splash_enable == 'on' )  {                setcookie('inbound_home_visit', true , time()+365*24*60*60, '/');                self::$first_visit = true;            }        }        /**         *  add custom post type posts to static page options         */        public static function add_landing_pages_to_homepage_select_dropdown( $pages ) {            if(is_admin()){                $my_pages = new WP_Query( array( 'post_type' => 'landing-page', 'posts_per_page' => '-1' , 'post_status' => 'publish') );                //print_r($my_pages);                if ( $my_pages->post_count > 0 ) {                    $pages = array_merge( $pages, $my_pages->posts );                }            }            return $pages;        }        /**         *  tamper with homepage query to call custom post type post if set         */        public static function hack_front_page_query( $query ){            if (isset($query->query['post_type'])) {                return;            }            $current_url = "http://".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"]."";            $wordpress_url = get_bloginfo('wpurl' );            $current_url = str_replace('/','',$current_url);            $wordpress_url = str_replace('/','',$wordpress_url);            if (($current_url==$wordpress_url)&& self::$front_page_id!=0) {                $query->query_vars['post_type'] = array( 'page','landing-page' );                $query->query_vars['ID'] = self::$front_page_id;            }        }        /**         *  make sure the correct template is called         */        public static function set_front_page_template() {            global $post;            if (!isset($post)){return;}            if ($post->ID != self::$front_page_id ) {                return;            }            /* check if splash qualified, then if landing page is set as static homepage, else return */            if (self::$first_visit && self::$splash_enable == 'on') {                self::$front_page_id =  self::$splash_page_id;                $query = query_posts( "page_id=".self::$front_page_id );            } else if ( !is_singular('landing-page') ) {                return;            }            $template = get_post_meta(  self::$front_page_id , 'lp-selected-template', true);            self::$variations = self::load_variations();            self::$marker = self::load_marker();            $_REQUEST['lp-variation-id'] = self::discover_next_variation( self::$front_page_id );            $my_theme =  wp_get_theme($template);            if ($my_theme->exists()) {                return;            } else if ($template!='default') {                $template = str_replace('_','-',$template);                if (file_exists(LANDINGPAGES_PATH.'templates/'.$template.'/index.php')) {                    include(LANDINGPAGES_PATH.'templates/'.$template.'/index.php');                    die();                } else {                    include(LANDINGPAGES_UPLOADS_PATH.$template.'/index.php');                    die();                }            }        }        /**         *  Loads an Array of Active Variations Associated with Landing Page         */        private static function load_variations() {            $live_variations = array();            $variations_string = get_post_meta( self::$front_page_id , 'lp-ab-variations' , true );            $variations = explode(',',$variations_string);            $variations = array_filter($variations,'is_numeric');            /* Check the Status of Each Variation and Keep Live Ones */            foreach ($variations as $key=>$vid) {                if ($vid==0) {                    $variation_status = get_post_meta( self::$front_page_id , 'lp_ab_variation_status' , true );                } else 	{                    $variation_status = get_post_meta( self::$front_page_id , 'lp_ab_variation_status-'.$vid , true );                }                if (!is_numeric($variation_status) || $variation_status==1) {                    $live_variations[] = $vid;                }            }            return $live_variations;        }        /**         *  Loads Variation ID of Last Variation Loaded         */        private static function load_marker() {            $marker = get_post_meta( self::$front_page_id , 'lp-ab-variations-marker' , true );            if ( !is_numeric($marker) || !in_array( $marker , self::$variations ) ) {                $marker = current(self::$variations);            }            return $marker;        }        /**         *  Discovers Next Variation in Line         */        private static function discover_next_variation() {            /* Set Pointer to Correct Location in Variations Array */            while ( self::$marker != current( self::$variations) ) {                next(self::$variations);            }            /* Discover the next variation in the array */            next(self::$variations);            /* If the pointer is empty then reset array */            if ( !is_numeric(current( self::$variations ) ) ) {                reset( self::$variations );            }            /* Save as Historical Data */            update_post_meta( self::$front_page_id , 'lp-ab-variations-marker' , current( self::$variations ) );            return current( self::$variations );        }        /**         *  Add licesning & updating         */        public static function extend_licensing() {            /* ignore these hooks if inbound pro is active */            if (defined('INBOUND_PRO_CURRENT_VERSION')) {                return;            }            /*PREPARE THIS EXTENSION FOR LICESNING*/            if ( class_exists( 'Inbound_License' ) ) {                $license = new Inbound_License( LP_HOMEPAGE_FILE , LP_HOMEPAGE_LABEL , LP_HOMEPAGE_SLUG , LP_HOMEPAGE_CURRENT_VERSION  , LP_HOMEPAGE_REMOTE_ITEM_NAME ) ;            }        }        /**         * Add legacy global settings         * @param $lp_global_settings         * @return mixed         */        public static function define_legacy_settings( $lp_global_settings ) {            /* ignore these hooks if inbound pro is active */            if (defined('INBOUND_PRO_CURRENT_VERSION')) {                return $lp_global_settings;            }            $lp_global_settings['lp-main']['settings']['splash-header'] = 	array(                'id'  => 'splash-header',                'type'  => 'html',                'label' => '<h4>'.__('Splash Page Settings' , 'inbound-pro' ).'</h4>',                'description' => '<h4>'.__('' , 'inbound-pro' ).'</h4>',                'default' => '<h4>'.__('' , 'inbound-pro' ).'</h4>'            );            $lp_global_settings['lp-main']['settings']['splash-enable'] = 	array(                'id'  => 'splash-enable',                'label'  => __( 'Enable/Disable Splash Page' , 'inbound-pro' ),                'description' => __( "A splash page will redirect direct first time homepage visitors to your landing page the first visit only." , 'inbound-pro'),                'type'  => 'radio',                'default' => 'off',                'options' => array(                    'on' => __( 'On' , 'inbound-pro'),                    'off' => __( 'Off' , 'inbound-pro')                )            );            $landing_pages = get_posts( array('posts_per_page'   => -1 , 'post_type' => 'landing-page' , 'post_status' => 'publish') );            $lp_global_settings['lp-main']['settings']['splash-page'] = 	array(                'id'  => 'splash-page',                'label'  => __( 'Splash Page (shows one time only)' , 'inbound-pro' ),                'description' => __( "Select the landing page you would like to show to your first time visitors." , 'inbound-pro'),                'type'  => 'dropdown',                'default' => '',                'options' => self::get_landing_pages()            );            return $lp_global_settings;        }        /**         *  Add inbound pro settings references         */        public static function add_pro_settings($settings) {            $settings['inbound-pro-settings']['home-page'] = array(                'group_name' => LP_HOMEPAGE_SLUG ,                'keywords' => __('homepage,use landing page as homepage,splash page' , 'inbound-pro'),                'fields' => array (                    array(                        'id'  => 'header',                        'type'  => 'header',                        'default'  => __('Landing Page As Homepage', 'inbound-pro' ),                        'options' => null                    ),                    array(                        'id'  => 'static-instructions',                        'type'  => 'ul',                        'label' => __( 'Set landing page as permanent homepage.' , 'inbound-pro' ),                        'options' => array(                            __( 'Open wp-admin->Settings->Reading and set your homepage to your landing page.' , 'inbound-pro' )                        )                    ),                    array(                        'id'  => 'splash-header',                        'type'  => 'html',                        'label' => __( 'Testing' , 'inbound-pro' ),                        'description' => '<div class="inbound-label-field"><label><strong>'. __( 'Set landing page as splash page' , 'inbound-pro' ) .'</strong></label></div>'                    ),                    array(                        'id'  => 'splash-enable',                        'label'  => __( 'Enable/Disable' , 'inbound-pro' ),                        'description' => __( "A splash page will redirect direct first time homepage visitors to your landing page the first visit only." , 'inbound-pro'),                        'type'  => 'radio',                        'default' => 'off',                        'options' => array(                            'on' => __( 'On' , 'inbound-pro'),                            'off' => __( 'Off' , 'inbound-pro')                        )                    ),                    array(                        'id'  => 'splash-landing-page',                        'label'  => __( 'Landing page' , 'inbound-pro' ),                        'description' => __( "Select the landing page you would like to show to your first time visitors." , 'inbound-pro'),                        'type'  => 'dropdown',                        'default' => '',                        'options' => self::get_landing_pages()                    )                )            );            return $settings;        }        /**         * get landing pages as array with ID->Title         */        public static function get_landing_pages() {            $landing_pages = array();            $posts = get_posts( array('posts_per_page'   => -1 , 'post_type' => 'landing-page' , 'post_status' => 'publish') );            foreach( $posts as $post ) {                $landing_pages[ $post->ID ] = $post->post_title;            }            return $landing_pages;        }        /**         * Gets settings from legacy or inbound pro         */        public static function get_settings() {            self::$front_page_id = get_option('page_on_front');            if (defined('INBOUND_PRO_CURRENT_VERSION')) {                $settings = Inbound_Options_API::get_option( 'inbound-pro' , 'settings' , array() );                self::$splash_enable =  (isset($settings[ LP_HOMEPAGE_SLUG ][ 'splash-enable' ])) ? $settings[ LP_HOMEPAGE_SLUG ][ 'splash-enable' ] : 'off';                self::$splash_page_id =  (isset($settings[ LP_HOMEPAGE_SLUG ][ 'splash-landing-page' ])) ? $settings[ LP_HOMEPAGE_SLUG ][ 'splash-landing-page' ] : 0;            } else {                self::$splash_enable = get_option('lp-main-splash-enable');                self::$splash_page_id = get_option('lp-main-splash-page');            }        }    }    new Home_Page_Lander();}